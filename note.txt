webpack (version 4.x) bundle files
打包工具（模块打包工具）
主要功能
1、打包，将多个文件打包成一个文件
2、转化，将一些浏览器不能试别的文件转换成可以试别的文件
主要构成
1、入口--entry
2、出口--output
3、模块--module
4、环境--mode develop and production
5、插件--plugin
6、转换器--loader
-----------------------------------------------------
npm 
	npm install -g cnpm --registry=https://registry.npm.taobao.org
	npm install xxx --save-dev or --save
	简写：npm i xxx -D or -S
-----------------------------------------------------
bundle command line:
webpack src/index.js --output dist/bundle.js
---------------------------------------------------
webpack.config.js webpack配置文件 配置文件的名字最好不改
*webpack 执行默认名称的配置文件
*webpack --config xxx.config.js 执行更改的配置文件
采用commonJs规范（需要对该规范进行了解）
-----------------------------------------------------
npm run dev
npm run build
可以在package.json的scripts中进行命令的配置
-------------------------------------------------------
parcel 打包工具 零配置
-------------------------------------------------------
webpack 4.x 实现所谓的零配置：无实际用途
-------------------------------------------------------
webpack --mode development or production
-------------------------------------------------------
多入口（对文件）
	entry 为数组，按照顺序依次打包
--------------------------------------------------------
多入口，多出口
	module.exports = {
		// 入口配置
		entry : {
			// entry1 : ['./src/index.js', './src/index2.js'],
			index : "./src/index.js",
			index2 : "./src/index2.js"
		},
		// 出口配置
		output : {
			// path : __dirname + '/dist', //path必须是绝对路径 __dirname为node提供的当前配置文件所在的路径
			path : path.resolve(__dirname, 'dist'), // 用于路径连接		
			filename : '[name].bundle.js'
		},
		// module rules
		// loaders
		module : {

		},
		// 插件 一般用于生产环境
		plugins : [],
		// 开发服务器
		devServer : {

		}
	}
-------------------------------------------------------------------
html-webpack-plugin:
	*依赖webpack、webpack-cli
	生成页面
	npm i html-webpack-plugin -D
	const HtmlWebpackPlugin = require('html-webpack-plugin');
	模板
		new  HtmlWebpackPlugin({
			template: '模板地址'
		});
	页面标题
		new  HtmlWebpackPlugin({
			title: 'xxx',
			template: '模板地址'
		});
	*****一定记得在模板使用
	生成的js链接要消除缓存
		new  HtmlWebpackPlugin({
			hash: true,
			title: 'xxx',
			template: '模板地址'
		});
	生成多个页面
	    多创建几个HtmlWebpackPlugin对象在plugins中，记住配置filename属性
	每个页面引入自己的js文件
	    chunks: [入口js的名字]
---------------------------------------------------------------------------------------------------------------
    clean-webpack-plugin:
        删除某些文件
        new CleanWebpackPlugin(['文件夹或者文件'])
---------------------------------------------------------------------------------------------------------------
    devServer
        webpack-dev-server
    more configurations note https://webpack.js.org/configuration
----------------------------------------------------------------------------------------------------------------
    loaders
        加载器，转化器
        比如将less or scss文件转化成css文件
----------------------------------------------------------------------------------------------------------------
    css 的导入需要loaders
        style-loader
        css-loader
            npm i style-loader -D
    在webpack.config.js中进行配置
-----------------------------------------------------------------------------------------------------------------
    打包后需要压缩上线
        如何压缩：
            webpack 4.x ： webpack --mode production
            之前的版本：uglifyjs-webpack-plugin
 ---------------------------------------------------------------------------------------------------------------
    图片
        url-loader 和 file-loader
        配置的时候只需要use url-loader就可以了，url-loader依赖于file-loader的
-----------------------------------------------------------------------------------------------------------------
    分离：css
        extract-text-webpack-plugin
        在plugins里面应用
            new ExtractTextWebpackPlugin(提取出去的路径)
----------------------------------------------------------------------------------------------------------
    mini-css-extract-plugin 也是用来提取css的
----------------------------------------------------------------------------------------------------------
    处理less:
        npm i less less-loader -D
    分离less
        use: ExtractTextWebpackPlugin.extra({
            fallback: 'style-loader',
            use: ['css-loader', 'less-loader']
        })
----------------------------------------------------------------------------------------------------------
    自动处理前缀：
        1、postCss 预处理器
        专门处理css平台
        npm install postcss-loader autoprefixer -D
        2、新建一个postcss的配置文件
            module.exports = {
                plugins: [
                    require('autoprefixer')
                ]
            }
         3、配置loader
            use: [
                { loader: 'style-loader' },
                { loader: 'css-loader' },
                { loader: 'postcss-loader' }
            ]
          4、提取出来
-----------------------------------------------------------------------------------------------------------
  消除冗余的scc代码
    purifycss
        npm install purifycss-webpack purify-css
        purifycss-webpack 插件需要配置路径paths
    引入插件
    需要引入一个额外的包
        glob  npm install glob -D
-----------------------------------------------------------------------------------------------------------
上线后调试的问题：
    webpack4.x 开启调试：
        --mode development 默认开启调试 --开发者工具-source-webpack中可以看到源码
    webpack3.x之前：
        sourceMap
        devtool: 'source-map'
-----------------------------------------------------------------------------------------------------------
babel:
    -用来编译js
    -让你很轻松的使用ES nevt version
    -jsx

babel-core  babel-loader  babel-preset-env
    1、下载
    2、配置
        {
            // 配置浏览器不能识别的语法转换器
            test: /\.(js|jsx)$/,
            use: ['babel-loader'],
            exclude: /node_modules/
        }
-----------------------------------------------------------------------------------------------------------
jsx:    npm install babel-preset-react -D
        npm install react react-dom -D
        仍然还需要react-loaders去加载react

        http://www.itstrive.com
        牧马人的git地址
-----------------------------------------------------------------------------------------------------------
在webpack中使用模块化和node中相同
    nodejs的commonjs规范
    导出： module.exports = module名字
    引入： require('./xxxxxx')
-----------------------------------------------------------------------------------------------------------
在webpack中使用json:
    webpack 3.x之前需要配置json-loader
    const json = require('xxx.json');
-----------------------------------------------------------------------------------------------------------
拷贝静态资源(静态资源输出)
    copy-webpack-plugin
        下载
            npm i copy-webpack-plugin -D
        引入
            const CopyWebpackPlugin = require('xxx');
        使用
            plugins: [
                new CopyWebpackPlugin([{
                    from: path.join(__dirname, 'src/assets'),
                    to: './public'
                }])
            ]
-----------------------------------------------------------------------------------------------------------
https://webpack.js.org/plugins/
插件信息都在npm官网上
-----------------------------------------------------------------------------------------------------------
使用第三方库
    jquery 
    1、直接npm下载，然后引入
        import $ form 'jquery'
    2、ProvidePlugin webpack内置插件，无需下载
        const webpack = require('webpack');
        在plugins中进行插件配置
            new webpack.ProvidePlugin({
                $: 'query',
                .....
            })
使用import 和 ProvidePlugin方式引入第三方库的区别 （代码冗余的区别）
    1、import方式不管我们在代码中是否使用了第三方的库，在打包后，都会将第三方库的代码打进到
    生产代码中；
    2、ProvidePlugin方式则不会将我们没使用过的第三方库打进去
-----------------------------------------------------------------------------------------------------------
提取第三方（或自己的）的js库：
    之前webpack3.x版本之前：
        CommonsChunkPlugin
    到了webpack4.x版本
        optimization.splitChunks
        注意：上面为配置，并不是插件了，和插件平级配置
        optimization: {
            splitChunks: {
                cacheGroups: {
                    vendor1: { // vendor 为小作坊的意思
                        chunks: 'initial',
                        name: 'jquery',
                        enforce: true
                    },
                    vendor2: { // vendor 为小作坊的意思
                        chunks: 'initial',
                        name: '入口名称',
                        enforce: true
                    }
                }
            }
        }
------------------------------------------------------------------------------------------------
总结： 通过配置来解决了js引入
